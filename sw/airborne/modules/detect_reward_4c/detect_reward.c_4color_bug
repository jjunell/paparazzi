/*


 */

#include "detect_reward.h"
#include "modules/computer_vision/colorfilter.h"
#include "firmwares/rotorcraft/navigation.h"
#include "generated/flight_plan.h"
#include "generated/airframe.h"
#include "state.h"

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

// red color  // 125,120,197
#ifndef R1_LUM_MIN
#define R1_LUM_MIN 41
#endif
#ifndef R1_LUM_MAX
#define R1_LUM_MAX 183
#endif
#ifndef R1_CB_MIN
#define R1_CB_MIN 82
#endif
#ifndef R1_CB_MAX
#define R1_CB_MAX 137
#endif
#ifndef R1_CR_MIN
#define R1_CR_MIN 160
#endif
#ifndef R1_CR_MAX
#define R1_CR_MAX 249
#endif

// blue color  //176,70,106
#ifndef B1_LUM_MIN
#define B1_LUM_MIN 140
#endif
#ifndef B1_LUM_MAX
#define B1_LUM_MAX 210
#endif
#ifndef B1_CB_MIN
#define B1_CB_MIN 40
#endif
#ifndef B1_CB_MAX
#define B1_CB_MAX 100
#endif
#ifndef B1_CR_MIN
#define B1_CR_MIN 75
#endif
#ifndef B1_CR_MAX
#define B1_CR_MAX 135
#endif

// yellow color  //84,129, 141
#ifndef Y1_LUM_MIN
#define Y1_LUM_MIN 54
#endif
#ifndef Y1_LUM_MAX
#define Y1_LUM_MAX 115
#endif
#ifndef Y1_CB_MIN
#define Y1_CB_MIN 99
#endif
#ifndef Y1_CB_MAX
#define Y1_CB_MAX 160
#endif
#ifndef Y1_CR_MIN
#define Y1_CR_MIN 110
#endif
#ifndef Y1_CR_MAX
#define Y1_CR_MAX 172
#endif

// purple color  //150,113,168
#ifndef P1_LUM_MIN
#define P1_LUM_MIN 120
#endif
#ifndef P1_LUM_MAX
#define P1_LUM_MAX 183
#endif
#ifndef P1_CB_MIN
#define P1_CB_MIN 85
#endif
#ifndef P1_CB_MAX
#define P1_CB_MAX 145
#endif
#ifndef P1_CR_MIN
#define P1_CR_MIN 138
#endif
#ifndef P1_CR_MAX
#define P1_CR_MAX 199
#endif

uint8_t detected_reward   = false;
const uint32_t thresholdColorCount   = 0.05 * 124800;   //520 x 240 = 124.800 total pixels  (fwd facing)
static int detect_array[4] = { 0, 0, 0, 0 };  //logical for each color detection (Y1 = hive, R1 = F1, B1=F2, P1=F3)

uint8_t color_lum_min;
uint8_t color_lum_max;

uint8_t color_cb_min;
uint8_t color_cb_max;

uint8_t color_cr_min;
uint8_t color_cr_max;

/*
 * Initialize function
 */

void detect_reward_init()
{
  // Initialize the variables of the colorfilter
  //  color_lum_min = R1_LUM_MIN;
  //  color_lum_max = R1_LUM_MAX;
  //  color_cb_min  = R1_CB_MIN;
  //  color_cb_max  = R1_CB_MAX;
  //  color_cr_min  = R1_CR_MIN;
  //  color_cr_max  = R1_CR_MAX;

}

void detect_reward_periodic()
{
  //
  color_lum_min = Y1_LUM_MIN;
  color_lum_max = Y1_LUM_MAX;
  color_cb_min  = Y1_CB_MIN;
  color_cb_max  = Y1_CB_MAX;
  color_cr_min  = Y1_CR_MIN;
  color_cr_max  = Y1_CR_MAX;

  detect_array[0] = color_count > thresholdColorCount;

  //
  color_lum_min = R1_LUM_MIN;
  color_lum_max = R1_LUM_MAX;
  color_cb_min  = R1_CB_MIN;
  color_cb_max  = R1_CB_MAX;
  color_cr_min  = R1_CR_MIN;
  color_cr_max  = R1_CR_MAX;

  detect_array[1] = color_count > thresholdColorCount;

  //
  color_lum_min = B1_LUM_MIN;
  color_lum_max = B1_LUM_MAX;
  color_cb_min  = B1_CB_MIN;
  color_cb_max  = B1_CB_MAX;
  color_cr_min  = B1_CR_MIN;
  color_cr_max  = B1_CR_MAX;

  detect_array[2] = color_count > thresholdColorCount;

  //
  color_lum_min = P1_LUM_MIN;
  color_lum_max = P1_LUM_MAX;
  color_cb_min  = P1_CB_MIN;
  color_cb_max  = P1_CB_MAX;
  color_cr_min  = P1_CR_MIN;
  color_cr_max  = P1_CR_MAX;

  detect_array[3] = color_count > thresholdColorCount;

  //
  printf("[y,r,b,p]: [ %d %d %d %d ] \n", detect_array[0],detect_array[1],detect_array[2],detect_array[3]);
  //printf("reward_flag: %d %d %d %d  \n", color_count, thresholdColorCount, detected_reward);


  if ((detect_array[0] + detect_array[1] + detect_array[2] + detect_array[3])>1)
  {
    printf("more than 1 POI detected\n");
  }

  if (detect_array[0]) { detected_reward = 4; }
  else if (detect_array[1]) { detected_reward = 1; }
  else if (detect_array[2]) { detected_reward = 2; }
  else if (detect_array[3]) { detected_reward = 3; }
  else { detected_reward = 0;}

}

